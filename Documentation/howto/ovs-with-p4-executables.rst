..
      Licensed under the Apache License, Version 2.0 (the "License"); you may
      not use this file except in compliance with the License. You may obtain
      a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
      WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
      License for the specific language governing permissions and limitations
      under the License.

      Convention for heading levels in Open vSwitch documentation:

      =======  Heading 0 (reserved for the title in a document)
      -------  Heading 1
      ~~~~~~~  Heading 2
      +++++++  Heading 3
      '''''''  Heading 4

      Avoid deeper levels because they do not render well.

==========================================================
Usage of Open vSwitch generated executables for P4 support
==========================================================

This document describes how to use executables generated by Open vSwitch
for supporting P4 programs.

- For code clone and build instructions refer to ``p4proto/p4rt/README``.

Prerequisites
-------------

Before using executables generated by OvS for P4 programming, user should
be having a valid P4 file and generated dependent files using P4 compiler
for the specific target.

Dependent generated files for a sample.p4 file::

    $ sample.conf, p4info.txt, bf-rt.json, pipe/context.json, pipe/sample.spec


ovs_pipeline_builder executable
-------------------------------

ovs_pipeline_builder is an executable generated when OvS is built and this
executable is used to generate a protobuf based bin file.
This pb.bin contains information of bfrt-config, context and config which are
extracted from sample.conf which is genrated via p4c compiler as mentioned
above.

Generate ``pb.bin``::

    $ ovs_pipeline_builder --p4c_conf_file=<path-to-input-sample-file.conf> \
        --bf_pipeline_config_binary_file=<path-to-output-file.pb.bin>
    $ Example: \
        ovs_pipeline_builder --p4c_conf_file=/home/mydir/sample.conf \
            --bf_pipeline_config_binary_file=/home/mydir/sample.pb.bin

.. important::

    Here we need to execute this command from the parent directory of
    relative paths mentioned in bfrt-config/context/config parameters
    of sample.conf


ovs-p4ctl executable
--------------------

ovs-p4ctl is an executable generated when OvS is built and this executable
is an gRPC client which connects to gRPC server running in OvS for enabling
p4runtime capabilities.

Each CLI command connects to gRPC ports opened by server, send a protobuf based
message. Refer to p4runtime.proto for more details on type of messages and
services that are available for a p4runtime client.

1. Set a forwarding pipeline::

    $ ovs-p4ctl set-pipe SWITCH PROGRAM P4INFO
    $ Example: ovs-p4ctl set-pipe br0 <path>/sample.pb.bin <path>/p4info.txt

  .. note::

    ``SWITCH``: Referes to the bridge name, which maps to device name
    internally.
    ``PROGRAM``: Refers to protobuf binary file generated by
    ovs_pipeline_builder executable and P4 program's configuration file.
    ``P4INFO``: Refers to P4Info.txt file generated by p4c compiler
    for a P4 program.

2. Get a forwarding pipeline::

    $ ovs-p4ctl get-pipe SWITCH
    $ Example: ovs-p4ctl set-pipe br0

  .. note::

    ``SWITCH``: Referes to the bridge name, which maps to device name
    internally.

3. Add a rule for a table into the forwarding pipeline::

    $ ovs-p4ctl add-entry SWITCH TABLE FLOW
    $ Example:
    ovs-p4ctl add-entry br0 ipv4_host "dst_ip=1.1.1.1,action=send(10)"

  .. note::

    ``SWITCH``: Referes to the bridge name, which maps to device name
    internally.
    ``TABLE``: Refers to table_name present in p4info.txt file.
    ``FLOW``: Refers to parameters for a the above mentioned TABLE
    match_filed_key=value action=action_name(value)

4. Delete a rule for a table from the forwarding pipeline::

    $ ovs-p4ctl del-entry SWITCH TABLE KEY
    $ Example: ovs-p4ctl del-entry br0 ipv4_host "dst_ip=1.1.1.1"

  .. note::

    ``SWITCH``: Referes to the bridge name, which maps to device name
    internally.
    ``TABLE``: Refers to table_name present in p4info.txt file.
    ``KEY``: Refers to match_filed_key parameter of the above mentioned
    TABLE match_filed_key=value

5. Get programmed rule from the forwarding pipeline [Future Implementation]::

    $ ovs-p4ctl dump-entries SWITCH [TABLE]
    $ Example: ovs-p4ctl dump-entries br0 ipv4_host

  .. note::

    ``SWITCH``: Referes to the bridge name, which maps to device name
    internally.
    ``TABLE``: Refers to table_name present in p4info.txt file.
    This is an optional field for get/dump command.

6. Set a default entry for a table into the forwarding pipeline ::

    $ ovs-p4ctl set-default-entry SWITCH TABLE ACTION
    $ Example: ovs-p4ctl set-default-entry br0 ipv4_host "send(10)"

  .. note::

    ``SWITCH``: Referes to the bridge name, which maps to device name
    internally.
    ``TABLE``: Refers to table_name present in p4info.txt file.
    ``ACTION``: Refers to action parameter of the above mentioned TABLE
    action_name(value)

7. Get a default entry for a table from the forwarding pipeline [Future Implementation]::

    $ ovs-p4ctl get-default-entry SWITCH TABLE
    $ Example: ovs-p4ctl get-default-entry br0 ipv4_host

  .. note::

    ``SWITCH``: Referes to the bridge name, which maps to device name
    internally.
    ``TABLE``: Refers to table_name present in p4info.txt file.


gnmi_cli executable
-------------------

gnmi_cli is an executable generated when OvS is built and this executable
is an gRPC client which connects to gRPC server running in OvS for enabling
gNMI/openconfig capabilities.

Each CLI command connects to gRPC ports opened by server, send a protobuf based
message. Refer to gnmi.proto and gnmi_ext.proto for more details on type of
messages and services that are available for a gNMI client.

Each CLI format should be inline with the YANG parser available in server which
is a tree based hierarchy. In P4 based OvS, we are having Interfaces as
root-node and followed by device type. Each device can hold muiltiple
ports, where port-name is acting as a KEY.
For Each port, we can have config parameters and state parameters.
We can execute SET command for config params and GET command for the
previously configured CONFIG params.

1) Set atrributes for a port::

    $ gnmi-cli set PARAMS
    $ Example:
    gnmi-cli set "device:virtual-device,name:net_vhost0,device-type:VIRTIO_NET"
    gnmi-cli set "device:virtual-device,name:net_vhost0,port-type:LINK"
    gnmi-cli set "device:virtual-device,name:net_vhost0,host:host1,
                  device-type:VIRTIO_NET,queues:1,
                  socket-path:/tmp/vhost-user-0,port-type:LINK"

  .. note::

    ``PARAMS``: These params are key:value pairs. Here virtual-device is a
    sub-node which holds multiple ports like net_vhost0, net_vhost1,... and
    each port accepts multiple config params. These config params are again a
    key:value pair, either can be passed in single CLI command or multiple
    CLI commands.
    name: can take values defined in chassis config file. Refer to file
    dpdk_vhost_config.pb.txt for port names.
    host: can be any string.
    queues: number of queues required by backend.
    socket-path: socket path required by backend.
    port-type: can take values defined in common.proto. Supported value is LINK.
    device-type: can take values defined in common.proto. Supported values is
    VIRTIO_NET.

2) Get atrributes for a port::

    $ gnmi-cli get PARAMS
    $ Example:
    gnmi-cli get "device:virtual-device,name:net_vhost0,device-type"
    gnmi-cli get "device:virtual-device,name:net_vhost0,port-type"

  .. note::

    ``PARAMS``: These params are key:value pairs. Here virtual-device is a
    sub-node which holds multiple ports like net_vhost0, net_vhost1,... Pass
    the key name for whose value need to be fetched. Each get can take ONLY
    one key, and fetches value for that previously configured KEY.

.. important::
  If grpc connection to server fails, export GRPC_TRACE=all and check if any
  proxy errors are encountered. If Yes, then configure localhost as an entry in
  NO_PROXY environmental variable (append localhost if NO_PROXY is already
  configured).

  Example: export NO_PROXY=localhost,127.0.0.1
